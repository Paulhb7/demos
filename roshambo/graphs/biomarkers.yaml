graphs:
  - id: emg_biomarkers
    nodes:
      # Subscribe to signals
      # --------------------
      - id: sub  # /!\ make sure you have a Broker amongst your graphs!  /!\
        module: timeflux.nodes.zmq
        class: Sub
        params:
          topics: [raw, events]


      # # Define apps for feedback
      # # -----------------------
      # - id: ui
      #   module: timeflux_ui.nodes.ui
      #   class: UI
      #   params:
      #     routes:
      #       roshambo: www  # now open http://localhost:8000/roshambo/
      #     settings:
      #       roshambo:
      #         fixation_duration: 1000
      #         trial_duration: 4000
      #         calibration_rounds: 2

      # Clean signal
      # -------------
      - id: notch
        module: timeflux_dsp.nodes.filters
        class: IIRFilter
        params:
          filter_type: bandstop
          frequencies: [45, 55]
          order: 1

      - id: bandpass
        module: timeflux_dsp.nodes.filters
        class: IIRFilter
        params:
          filter_type: bandpass
          frequencies: [10, 200]
          order: 2


      - id: mask_saturation
        module: nodes.filters
        class:  DropOutsider
        params:
          left: -1.5
          right: 1.5

      # Detect burst using TKEO
      # -----------------------
      - id: tkeo
        module: nodes.emg
        class:  TKEO

      - id: smooth
        module: nodes.filters
        class:  MovingAverage
        params:
          length: .5  #.1
          step: 0.

      - id: scale
        module: nodes.filters
        class: RecursiveScaler
        params:
          method: minmax
          limits: [.1, 2]

      # KNN on temporal features
      # -------------------------
      - id: temporal_features
        module: nodes.emg
        class: TemporalFeatures

      - id: epoch
        module: timeflux.nodes.epoch
        class: Epoch
        params:
          before: 0.0
          after: 3.0
          event_trigger: trial_starts

      - id: fit_predict
        module: timeflux.nodes.ml
        class: Pipeline
        params:
          mode: predict
          event_start_accumulation:  calibration_starts
          event_stop_accumulation: calibration_stops
          event_start_training: calibration_stops
          meta_label: [epoch, context, id]
          steps:
            - module: timeflux.estimators.transformers.shape
              class: Reduce
              args:
                axis: 1
            - module: sklearn.preprocessing
              class: Normalizer
              args:
                norm: max
            - module: sklearn.neighbors
              class: KNeighborsClassifier


      # Finally, publish some streams to save them
      # -------------------------------------------
      - id: pub_events
        module: timeflux.nodes.zmq
        class: Pub
        params:
          topic: events

      - id: pub_filtered
        module: timeflux.nodes.zmq
        class: Pub
        params:
          topic: filtered

      - id: pub_burst
        module: timeflux.nodes.zmq
        class: Pub
        params:
          topic: burst

      - id: pub_features
        module: timeflux.nodes.zmq
        class: Pub
        params:
          topic: features

      # for debug purpose
      # ------------------
      - id: display
        module: timeflux.nodes.debug
        class: Display


    edges:
      - source: sub:raw
        target: notch
      - source: notch
        target: bandpass
      - source: bandpass
        target: mask_saturation

      # Detect burst using TKEO
      # -----------------------
      - source: mask_saturation
        target: tkeo
      - source: tkeo
        target: smooth
      - source: smooth
        target: scale

      # KNN on temporal features
      # -------------------------
      - source: mask_saturation
        target: epoch
      - source: sub:events   
        target: epoch:events
      - source: epoch:*
        target: temporal_features
      - source: sub:events
        target: fit_predict:events
      - source: temporal_features:*
        target: fit_predict:training
      - source: temporal_features:*
        target: fit_predict
      - source: fit_predict:events
        target: pub_events

      # UI
      # ----
      # - source: sub:events
      #   target: drop_meta
      # - source: drop_meta
      #   target: ui:events


      # Publish
      # --------
      - source: scale
        target: pub_burst
      - source: temporal_features
        target: pub_features
      - source: mask_saturation
        target: pub_filtered

      # for debug purpose 
      # -----------------
      - source: temporal_features:0
        target: display

    rate: 0